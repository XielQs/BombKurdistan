name: Build and Deploy to Itch.io and GitHub Releases

on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - '.github/workflows/build-and-deploy.yml'
      - 'assets/**'
  workflow_dispatch:

env:
  MAJOR_VERSION: 1

jobs:
  build-linux-windows:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.log }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Calculate version
        id: version
        run: |
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")

          if [[ -n "$LATEST_TAG" ]]; then
            echo "Latest release found: $LATEST_TAG"
            # strip 'v' and split into components
            VERSION_NUM=${LATEST_TAG#v}
            IFS='.' read -r _ MINOR PATCH <<< "$VERSION_NUM"

            # increment patch version
            PATCH=$((PATCH + 1))

            # if patch reaches 10, increment minor and reset patch
            if [[ $PATCH -ge 10 ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            fi

            NEW_VERSION="${{ env.MAJOR_VERSION }}.${MINOR}.${PATCH}"
            echo "New version from release: $NEW_VERSION"
          else
            echo "No releases found, calculating from run number"
            # fallback to run number calculation
            RUN_NUM=${{ github.run_number }}
            MINOR_VERSION=$((RUN_NUM / 10))
            PATCH_VERSION=$((RUN_NUM % 10))
            NEW_VERSION="${{ env.MAJOR_VERSION }}.${MINOR_VERSION}.${PATCH_VERSION}"
            echo "New version from run number: $NEW_VERSION"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Final version will be: $NEW_VERSION"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Get previous tag
        id: prev_tag
        run: |
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          echo "prev=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -n "${{ steps.prev_tag.outputs.prev }}" ]; then
            LOG=$(git log ${{ steps.prev_tag.outputs.prev }}..HEAD --pretty=format:"- %s (%h)")
          else
            LOG=$(git log --pretty=format:"- %s (%h)")
          fi
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            make cmake \
            libx11-dev libxcursor-dev libxrandr-dev libxi-dev libxinerama-dev libgl1-mesa-dev \
            libjansson-dev zip unzip \
            mingw-w64 mingw-w64-tools

      - name: Make build script executable
        run: chmod +x build.sh

      - name: Build Linux version
        run: ./build.sh

      - name: Build Windows version
        run: ./build.sh -w

      - name: Zip build
        run: ./build.sh -z

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-windows-builds
          path: |
            bombkurdistan_linux.zip
            bombkurdistan_windows.zip

  build-mac:
    runs-on: macos-latest
    needs: build-linux-windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Make build script executable
        run: chmod +x build.sh

      - name: Build Mac version
        run: ./build.sh

      - name: Zip Mac build
        run: ./build.sh -z

      - name: Rename Mac zip
        run: mv bombkurdistan_linux.zip bombkurdistan_mac.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-build
          path: bombkurdistan_mac.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-linux-windows, build-mac]

    steps:
      - name: Download Linux & Windows builds
        uses: actions/download-artifact@v4
        with:
          name: linux-windows-builds

      - name: Download Mac build
        uses: actions/download-artifact@v4
        with:
          name: mac-build

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          sudo mv butler /usr/local/bin/

      - name: Authenticate Butler
        run: butler login
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_API_KEY }}

      - name: Upload Linux build to Itch.io
        run: butler push bombkurdistan_linux.zip xielq/bomb-kurdistan:linux --userversion=${{ needs.build-linux-windows.outputs.version }}
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_API_KEY }}

      - name: Upload Windows build to Itch.io
        run: butler push bombkurdistan_windows.zip xielq/bomb-kurdistan:windows --userversion=${{ needs.build-linux-windows.outputs.version }}
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_API_KEY }}

      - name: Upload Mac build to Itch.io
        run: butler push bombkurdistan_mac.zip xielq/bomb-kurdistan:mac --userversion=${{ needs.build-linux-windows.outputs.version }}
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_API_KEY }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-linux-windows.outputs.version }}
          name: 'Release v${{ needs.build-linux-windows.outputs.version }}'
          body: |
            ## Bomb Kurdistan v${{ needs.build-linux-windows.outputs.version }}

            ### Changes
            ${{ needs.build-linux-windows.outputs.changelog }}

            ### Downloads
            - **Linux**: bombkurdistan_linux.zip
            - **Windows**: bombkurdistan_windows.zip
            - **Mac**: bombkurdistan_mac.zip
          draft: false
          prerelease: false
          files: |
            bombkurdistan_linux.zip
            bombkurdistan_windows.zip
            bombkurdistan_mac.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
